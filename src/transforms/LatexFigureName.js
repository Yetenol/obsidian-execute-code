import * as path from 'path';
import * as r from 'src/output/RegExpUtilities';
export const ILLEGAL_FILENAME_CHARS = /[<>:"/\\|?*]+/g;
export const WHITESPACE_AND_ILLEGAL_CHARS = /[<>:"/\\|?*\s]+/;
export const MAYBE_WHITESPACE_AND_ILLEGAL = /[<>:"/\\|?*\s]*/;
export const FIGURE_FILENAME_EXTENSIONS = /(.pdf|.svg|.png)/;
export const FILENAME_PREFIX = /figure /;
export const UNNAMED_PREFIX = /temp /;
export const TEMP_FIGURE_NAME = /figure temp \d+/;
let latexFilenameIndex = 0;
export async function retrieveFigurePath(codeblockContent, titlePattern, srcFile, settings) {
    const vaultAbsolutePath = this.app.vault.adapter.basePath;
    const vaultAttachmentPath = await this.app.fileManager.getAvailablePathForAttachment("test", srcFile);
    const vaultAttachmentDir = path.dirname(vaultAttachmentPath);
    const figureDir = path.join(vaultAbsolutePath, vaultAttachmentDir);
    let figureTitle = captureFigureTitle(codeblockContent, titlePattern);
    if (!figureTitle) {
        const index = nextLatexFilenameIndex(settings.latexMaxFigures);
        figureTitle = UNNAMED_PREFIX.source + index;
    }
    return path.join(figureDir, FILENAME_PREFIX.source + figureTitle);
}
function captureFigureTitle(codeblockContent, titlePattern) {
    const pattern = r.parse(titlePattern);
    if (!pattern)
        return undefined;
    const match = codeblockContent.match(pattern);
    const title = match === null || match === void 0 ? void 0 : match[1];
    if (!title)
        return undefined;
    return sanitizeFilename(title);
}
function sanitizeFilename(input) {
    const trailingFilenames = r.concat(FIGURE_FILENAME_EXTENSIONS, /$/);
    return input
        .replace(ILLEGAL_FILENAME_CHARS, ' ') // Remove illegal filename characters
        .replace(/\s+/g, ' ') // Normalize whitespace
        .trim()
        .replace(r.concat(/^/, FILENAME_PREFIX), '') // Remove prefix
        .replace(trailingFilenames, ''); // Remove file extension
}
export function generalizeFigureTitle(figureName) {
    const normalized = sanitizeFilename(figureName);
    const escaped = r.escape(normalized);
    const whitespaced = new RegExp(escaped.source
        .replace(/\s+/g, WHITESPACE_AND_ILLEGAL_CHARS.source)); // Also allow illegal filename characters in whitespace
    return r.concat(MAYBE_WHITESPACE_AND_ILLEGAL, r.optional(FILENAME_PREFIX), // Optional prefix
    MAYBE_WHITESPACE_AND_ILLEGAL, whitespaced, MAYBE_WHITESPACE_AND_ILLEGAL, r.optional(FIGURE_FILENAME_EXTENSIONS), // Optional file extension
    MAYBE_WHITESPACE_AND_ILLEGAL);
}
function nextLatexFilenameIndex(maxIndex) {
    latexFilenameIndex %= maxIndex;
    return latexFilenameIndex++;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGF0ZXhGaWd1cmVOYW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTGF0ZXhGaWd1cmVOYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sS0FBSyxDQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFHaEQsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQVcsZ0JBQWdCLENBQUM7QUFDL0QsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQVcsaUJBQWlCLENBQUM7QUFDdEUsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQVcsaUJBQWlCLENBQUM7QUFDdEUsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQVcsa0JBQWtCLENBQUM7QUFDckUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFXLFNBQVMsQ0FBQztBQUNqRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQVcsT0FBTyxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFXLGlCQUFpQixDQUFDO0FBRTFELElBQUksa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO0FBRTNCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQUMsZ0JBQXdCLEVBQUUsWUFBb0IsRUFBRSxPQUFlLEVBQUUsUUFBMEI7SUFDaEksTUFBTSxpQkFBaUIsR0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFlLENBQUMsUUFBUSxDQUFDO0lBQ25FLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEcsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDN0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ25FLElBQUksV0FBVyxHQUFHLGtCQUFrQixDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3JFLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDZCxNQUFNLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDL0QsV0FBVyxHQUFHLGNBQWMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0tBQy9DO0lBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxDQUFDO0FBQ3RFLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLGdCQUF3QixFQUFFLFlBQW9CO0lBQ3RFLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEMsSUFBSSxDQUFDLE9BQU87UUFBRSxPQUFPLFNBQVMsQ0FBQztJQUMvQixNQUFNLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsTUFBTSxLQUFLLEdBQUcsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLElBQUksQ0FBQyxLQUFLO1FBQUUsT0FBTyxTQUFTLENBQUM7SUFDN0IsT0FBTyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxLQUFhO0lBQ25DLE1BQU0saUJBQWlCLEdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQywwQkFBMEIsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1RSxPQUFPLEtBQUs7U0FDUCxPQUFPLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxDQUFDLENBQUMscUNBQXFDO1NBQzFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsdUJBQXVCO1NBQzVDLElBQUksRUFBRTtTQUNOLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxnQkFBZ0I7U0FDNUQsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsd0JBQXdCO0FBQ2pFLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsVUFBa0I7SUFDcEQsTUFBTSxVQUFVLEdBQVcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEQsTUFBTSxPQUFPLEdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QyxNQUFNLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTTtTQUN4QyxPQUFPLENBQUMsTUFBTSxFQUFFLDRCQUE0QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyx1REFBdUQ7SUFDbkgsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUNYLDRCQUE0QixFQUM1QixDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGtCQUFrQjtJQUMvQyw0QkFBNEIsRUFDNUIsV0FBVyxFQUNYLDRCQUE0QixFQUM1QixDQUFDLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsMEJBQTBCO0lBQ2xFLDRCQUE0QixDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELFNBQVMsc0JBQXNCLENBQUMsUUFBZ0I7SUFDNUMsa0JBQWtCLElBQUksUUFBUSxDQUFDO0lBQy9CLE9BQU8sa0JBQWtCLEVBQUUsQ0FBQztBQUNoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0ICogYXMgciBmcm9tICdzcmMvb3V0cHV0L1JlZ0V4cFV0aWxpdGllcyc7XHJcbmltcG9ydCB7IEV4ZWN1dG9yU2V0dGluZ3MgfSBmcm9tICdzcmMvc2V0dGluZ3MvU2V0dGluZ3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IElMTEVHQUxfRklMRU5BTUVfQ0hBUlM6IFJlZ0V4cCA9IC9bPD46XCIvXFxcXHw/Kl0rL2c7XHJcbmV4cG9ydCBjb25zdCBXSElURVNQQUNFX0FORF9JTExFR0FMX0NIQVJTOiBSZWdFeHAgPSAvWzw+OlwiL1xcXFx8PypcXHNdKy87XHJcbmV4cG9ydCBjb25zdCBNQVlCRV9XSElURVNQQUNFX0FORF9JTExFR0FMOiBSZWdFeHAgPSAvWzw+OlwiL1xcXFx8PypcXHNdKi87XHJcbmV4cG9ydCBjb25zdCBGSUdVUkVfRklMRU5BTUVfRVhURU5TSU9OUzogUmVnRXhwID0gLygucGRmfC5zdmd8LnBuZykvO1xyXG5leHBvcnQgY29uc3QgRklMRU5BTUVfUFJFRklYOiBSZWdFeHAgPSAvZmlndXJlIC87XHJcbmV4cG9ydCBjb25zdCBVTk5BTUVEX1BSRUZJWDogUmVnRXhwID0gL3RlbXAgLztcclxuZXhwb3J0IGNvbnN0IFRFTVBfRklHVVJFX05BTUU6IFJlZ0V4cCA9IC9maWd1cmUgdGVtcCBcXGQrLztcclxuXHJcbmxldCBsYXRleEZpbGVuYW1lSW5kZXggPSAwO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJldHJpZXZlRmlndXJlUGF0aChjb2RlYmxvY2tDb250ZW50OiBzdHJpbmcsIHRpdGxlUGF0dGVybjogc3RyaW5nLCBzcmNGaWxlOiBzdHJpbmcsIHNldHRpbmdzOiBFeGVjdXRvclNldHRpbmdzKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IHZhdWx0QWJzb2x1dGVQYXRoID0gKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5iYXNlUGF0aDtcclxuICAgIGNvbnN0IHZhdWx0QXR0YWNobWVudFBhdGggPSBhd2FpdCB0aGlzLmFwcC5maWxlTWFuYWdlci5nZXRBdmFpbGFibGVQYXRoRm9yQXR0YWNobWVudChcInRlc3RcIiwgc3JjRmlsZSk7XHJcbiAgICBjb25zdCB2YXVsdEF0dGFjaG1lbnREaXIgPSBwYXRoLmRpcm5hbWUodmF1bHRBdHRhY2htZW50UGF0aCk7XHJcbiAgICBjb25zdCBmaWd1cmVEaXIgPSBwYXRoLmpvaW4odmF1bHRBYnNvbHV0ZVBhdGgsIHZhdWx0QXR0YWNobWVudERpcik7XHJcbiAgICBsZXQgZmlndXJlVGl0bGUgPSBjYXB0dXJlRmlndXJlVGl0bGUoY29kZWJsb2NrQ29udGVudCwgdGl0bGVQYXR0ZXJuKTtcclxuICAgIGlmICghZmlndXJlVGl0bGUpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IG5leHRMYXRleEZpbGVuYW1lSW5kZXgoc2V0dGluZ3MubGF0ZXhNYXhGaWd1cmVzKTtcclxuICAgICAgICBmaWd1cmVUaXRsZSA9IFVOTkFNRURfUFJFRklYLnNvdXJjZSArIGluZGV4O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdGguam9pbihmaWd1cmVEaXIsIEZJTEVOQU1FX1BSRUZJWC5zb3VyY2UgKyBmaWd1cmVUaXRsZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhcHR1cmVGaWd1cmVUaXRsZShjb2RlYmxvY2tDb250ZW50OiBzdHJpbmcsIHRpdGxlUGF0dGVybjogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IHBhdHRlcm4gPSByLnBhcnNlKHRpdGxlUGF0dGVybik7XHJcbiAgICBpZiAoIXBhdHRlcm4pIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICBjb25zdCBtYXRjaCA9IGNvZGVibG9ja0NvbnRlbnQubWF0Y2gocGF0dGVybik7XHJcbiAgICBjb25zdCB0aXRsZSA9IG1hdGNoPy5bMV07XHJcbiAgICBpZiAoIXRpdGxlKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIHNhbml0aXplRmlsZW5hbWUodGl0bGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzYW5pdGl6ZUZpbGVuYW1lKGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgdHJhaWxpbmdGaWxlbmFtZXM6IFJlZ0V4cCA9IHIuY29uY2F0KEZJR1VSRV9GSUxFTkFNRV9FWFRFTlNJT05TLCAvJC8pO1xyXG4gICAgcmV0dXJuIGlucHV0XHJcbiAgICAgICAgLnJlcGxhY2UoSUxMRUdBTF9GSUxFTkFNRV9DSEFSUywgJyAnKSAvLyBSZW1vdmUgaWxsZWdhbCBmaWxlbmFtZSBjaGFyYWN0ZXJzXHJcbiAgICAgICAgLnJlcGxhY2UoL1xccysvZywgJyAnKSAvLyBOb3JtYWxpemUgd2hpdGVzcGFjZVxyXG4gICAgICAgIC50cmltKClcclxuICAgICAgICAucmVwbGFjZShyLmNvbmNhdCgvXi8sIEZJTEVOQU1FX1BSRUZJWCksICcnKSAvLyBSZW1vdmUgcHJlZml4XHJcbiAgICAgICAgLnJlcGxhY2UodHJhaWxpbmdGaWxlbmFtZXMsICcnKTsgLy8gUmVtb3ZlIGZpbGUgZXh0ZW5zaW9uXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmFsaXplRmlndXJlVGl0bGUoZmlndXJlTmFtZTogc3RyaW5nKTogUmVnRXhwIHtcclxuICAgIGNvbnN0IG5vcm1hbGl6ZWQ6IHN0cmluZyA9IHNhbml0aXplRmlsZW5hbWUoZmlndXJlTmFtZSk7XHJcbiAgICBjb25zdCBlc2NhcGVkOiBSZWdFeHAgPSByLmVzY2FwZShub3JtYWxpemVkKTtcclxuICAgIGNvbnN0IHdoaXRlc3BhY2VkID0gbmV3IFJlZ0V4cChlc2NhcGVkLnNvdXJjZVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXHMrL2csIFdISVRFU1BBQ0VfQU5EX0lMTEVHQUxfQ0hBUlMuc291cmNlKSk7IC8vIEFsc28gYWxsb3cgaWxsZWdhbCBmaWxlbmFtZSBjaGFyYWN0ZXJzIGluIHdoaXRlc3BhY2VcclxuICAgIHJldHVybiByLmNvbmNhdChcclxuICAgICAgICBNQVlCRV9XSElURVNQQUNFX0FORF9JTExFR0FMLFxyXG4gICAgICAgIHIub3B0aW9uYWwoRklMRU5BTUVfUFJFRklYKSwgLy8gT3B0aW9uYWwgcHJlZml4XHJcbiAgICAgICAgTUFZQkVfV0hJVEVTUEFDRV9BTkRfSUxMRUdBTCxcclxuICAgICAgICB3aGl0ZXNwYWNlZCxcclxuICAgICAgICBNQVlCRV9XSElURVNQQUNFX0FORF9JTExFR0FMLFxyXG4gICAgICAgIHIub3B0aW9uYWwoRklHVVJFX0ZJTEVOQU1FX0VYVEVOU0lPTlMpLCAvLyBPcHRpb25hbCBmaWxlIGV4dGVuc2lvblxyXG4gICAgICAgIE1BWUJFX1dISVRFU1BBQ0VfQU5EX0lMTEVHQUwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBuZXh0TGF0ZXhGaWxlbmFtZUluZGV4KG1heEluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgbGF0ZXhGaWxlbmFtZUluZGV4ICU9IG1heEluZGV4O1xyXG4gICAgcmV0dXJuIGxhdGV4RmlsZW5hbWVJbmRleCsrO1xyXG59XHJcbiJdfQ==