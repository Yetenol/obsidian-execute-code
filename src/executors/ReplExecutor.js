import { spawn } from "child_process";
import { Notice } from "obsidian";
import AsyncExecutor from "./AsyncExecutor.js";
import killWithChildren from "./killWithChildren.js";
export default class ReplExecutor extends AsyncExecutor {
    constructor(settings, path, args, file, language) {
        var _a;
        super(file, language);
        this.settings = settings;
        if (this.settings.wslMode) {
            args.unshift("-e", path);
            path = "wsl";
        }
        // Replace %USERNAME% with actual username (if it exists)
        if (path.includes("%USERNAME%") && ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.USERNAME))
            path = path.replace("%USERNAME%", process.env.USERNAME);
        // Spawns a new REPL that is used to execute code.
        // {env: process.env} is used to ensure that the environment variables are passed to the REPL.
        this.process = spawn(path, args, { env: process.env });
        this.process.on("close", () => {
            this.emit("close");
            new Notice("Runtime exited");
            this.process = null;
        });
        this.process.on("error", (err) => {
            this.notifyError(settings.pythonPath, args.join(" "), "", err, undefined, "Error launching process: " + err);
            this.stop();
        });
        this.setup().then(() => { });
    }
    /**
     * Run some code
     * @param code code to run
     * @param outputter outputter to use
     * @param cmd Not used
     * @param cmdArgs Not used
     * @param ext Not used
     * @returns A promise that resolves once the code is done running
     */
    run(code, outputter, cmd, cmdArgs, ext) {
        outputter.queueBlock();
        return this.addJobToQueue((resolve, _reject) => {
            if (this.process === null)
                return resolve();
            const finishSigil = `SIGIL_BLOCK_DONE_${Math.random()}_${Date.now()}_${code.length}`;
            outputter.startBlock();
            const wrappedCode = this.wrapCode(code, finishSigil);
            this.process.stdin.write(wrappedCode);
            outputter.clear();
            outputter.on("data", (data) => {
                this.process.stdin.write(data);
            });
            const writeToStdout = (data) => {
                let str = data.toString();
                if (str.endsWith(finishSigil)) {
                    str = str.substring(0, str.length - finishSigil.length);
                    this.process.stdout.removeListener("data", writeToStdout);
                    this.process.stderr.removeListener("data", writeToStderr);
                    this.process.removeListener("close", resolve);
                    outputter.write(str);
                    resolve();
                }
                else {
                    outputter.write(str);
                }
            };
            const writeToStderr = (data) => {
                outputter.writeErr(this.removePrompts(data.toString(), "stderr"));
            };
            this.process.on("close", resolve);
            this.process.stdout.on("data", writeToStdout);
            this.process.stderr.on("data", writeToStderr);
        });
    }
    stop() {
        return new Promise((resolve, _reject) => {
            this.process.on("close", () => {
                resolve();
            });
            killWithChildren(this.process.pid);
            this.process = null;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVwbEV4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVwbEV4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBa0MsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFJbEMsT0FBTyxhQUFhLE1BQU0sb0JBQW9CLENBQUM7QUFDL0MsT0FBTyxnQkFBZ0IsTUFBTSx1QkFBdUIsQ0FBQztBQUVyRCxNQUFNLENBQUMsT0FBTyxPQUFnQixZQUFhLFNBQVEsYUFBYTtJQVE1RCxZQUFzQixRQUEwQixFQUFFLElBQVksRUFBRSxJQUFjLEVBQUUsSUFBWSxFQUFFLFFBQW9COztRQUM5RyxLQUFLLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXRCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBRXpCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDekIsSUFBSSxHQUFHLEtBQUssQ0FBQztTQUNoQjtRQUVELHlEQUF5RDtRQUN6RCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUksTUFBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsR0FBRywwQ0FBRSxRQUFRLENBQUE7WUFDckQsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFbEUsa0RBQWtEO1FBQ2xELDhGQUE4RjtRQUN4RixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNuQixJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsMkJBQTJCLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDN0csSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBa0UsQ0FBQyxDQUFDLENBQUM7SUFDaEcsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsR0FBRyxDQUFDLElBQVksRUFBRSxTQUFvQixFQUFFLEdBQVcsRUFBRSxPQUFlLEVBQUUsR0FBVztRQUM3RSxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFdkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQzNDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJO2dCQUFFLE9BQU8sT0FBTyxFQUFFLENBQUM7WUFFNUMsTUFBTSxXQUFXLEdBQUcsb0JBQW9CLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBRXJGLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUV2QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztZQUVyRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFdEMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBRWxCLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQztZQUVILE1BQU0sYUFBYSxHQUFHLENBQUMsSUFBUyxFQUFFLEVBQUU7Z0JBQ2hDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFFMUIsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO29CQUMzQixHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBRXhELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUE7b0JBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7b0JBQzFELElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztvQkFDOUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFFckIsT0FBTyxFQUFFLENBQUM7aUJBQ2I7cUJBQU07b0JBQ0gsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDeEI7WUFDTCxDQUFDLENBQUM7WUFFRixNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFO2dCQUNoQyxTQUFTLENBQUMsUUFBUSxDQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUNoRCxDQUFDO1lBQ04sQ0FBQyxDQUFBO1lBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRWxDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxJQUFJO1FBQ0EsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUMxQixPQUFPLEVBQUUsQ0FBQztZQUNkLENBQUMsQ0FBQyxDQUFDO1lBRUgsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoaWxkUHJvY2Vzc1dpdGhvdXROdWxsU3RyZWFtcywgc3Bhd24gfSBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xyXG5pbXBvcnQgeyBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgTGFuZ3VhZ2VJZCB9IGZyb20gXCIuLi9tYWluLmpzXCI7XHJcbmltcG9ydCB7IE91dHB1dHRlciB9IGZyb20gXCIuLi9vdXRwdXQvT3V0cHV0dGVyLmpzXCI7XHJcbmltcG9ydCB7IEV4ZWN1dG9yU2V0dGluZ3MgfSBmcm9tIFwiLi4vc2V0dGluZ3MvU2V0dGluZ3MuanNcIjtcclxuaW1wb3J0IEFzeW5jRXhlY3V0b3IgZnJvbSBcIi4vQXN5bmNFeGVjdXRvci5qc1wiO1xyXG5pbXBvcnQga2lsbFdpdGhDaGlsZHJlbiBmcm9tIFwiLi9raWxsV2l0aENoaWxkcmVuLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBSZXBsRXhlY3V0b3IgZXh0ZW5kcyBBc3luY0V4ZWN1dG9yIHtcclxuICAgIHByb2Nlc3M6IENoaWxkUHJvY2Vzc1dpdGhvdXROdWxsU3RyZWFtcztcclxuICAgIHNldHRpbmdzOiBFeGVjdXRvclNldHRpbmdzO1xyXG4gICAgXHJcbiAgICBhYnN0cmFjdCB3cmFwQ29kZShjb2RlOiBzdHJpbmcsIGZpbmlzaFNpZ2lsOiBzdHJpbmcpOiBzdHJpbmc7XHJcbiAgICBhYnN0cmFjdCBzZXR1cCgpOiBQcm9taXNlPHZvaWQ+O1xyXG4gICAgYWJzdHJhY3QgcmVtb3ZlUHJvbXB0cyhvdXRwdXQ6IHN0cmluZywgc291cmNlOiBcInN0ZG91dFwiIHwgXCJzdGRlcnJcIik6IHN0cmluZztcclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHNldHRpbmdzOiBFeGVjdXRvclNldHRpbmdzLCBwYXRoOiBzdHJpbmcsIGFyZ3M6IHN0cmluZ1tdLCBmaWxlOiBzdHJpbmcsIGxhbmd1YWdlOiBMYW5ndWFnZUlkKSB7XHJcbiAgICAgICAgc3VwZXIoZmlsZSwgbGFuZ3VhZ2UpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy53c2xNb2RlKSB7XHJcbiAgICAgICAgICAgIGFyZ3MudW5zaGlmdChcIi1lXCIsIHBhdGgpO1xyXG4gICAgICAgICAgICBwYXRoID0gXCJ3c2xcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlcGxhY2UgJVVTRVJOQU1FJSB3aXRoIGFjdHVhbCB1c2VybmFtZSAoaWYgaXQgZXhpc3RzKVxyXG4gICAgICAgIGlmIChwYXRoLmluY2x1ZGVzKFwiJVVTRVJOQU1FJVwiKSAmJiBwcm9jZXNzPy5lbnY/LlVTRVJOQU1FKVxyXG4gICAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKFwiJVVTRVJOQU1FJVwiLCBwcm9jZXNzLmVudi5VU0VSTkFNRSk7XHJcblxyXG5cdFx0Ly8gU3Bhd25zIGEgbmV3IFJFUEwgdGhhdCBpcyB1c2VkIHRvIGV4ZWN1dGUgY29kZS5cclxuXHRcdC8vIHtlbnY6IHByb2Nlc3MuZW52fSBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXJlIHBhc3NlZCB0byB0aGUgUkVQTC5cclxuICAgICAgICB0aGlzLnByb2Nlc3MgPSBzcGF3bihwYXRoLCBhcmdzLCB7ZW52OiBwcm9jZXNzLmVudn0pO1xyXG5cclxuICAgICAgICB0aGlzLnByb2Nlc3Mub24oXCJjbG9zZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImNsb3NlXCIpO1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiUnVudGltZSBleGl0ZWRcIik7XHJcbiAgICAgICAgICAgIHRoaXMucHJvY2VzcyA9IG51bGw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzLm9uKFwiZXJyb3JcIiwgKGVycjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5RXJyb3Ioc2V0dGluZ3MucHl0aG9uUGF0aCwgYXJncy5qb2luKFwiIFwiKSwgXCJcIiwgZXJyLCB1bmRlZmluZWQsIFwiRXJyb3IgbGF1bmNoaW5nIHByb2Nlc3M6IFwiICsgZXJyKTtcclxuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zZXR1cCgpLnRoZW4oKCkgPT4geyAvKiBXYWl0IGZvciB0aGUgaW5oZXJpdGluZyBjbGFzcyB0byBzZXQgdXAsIHRoZW4gZG8gbm90aGluZyAqLyB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBSdW4gc29tZSBjb2RlXHJcbiAgICAgKiBAcGFyYW0gY29kZSBjb2RlIHRvIHJ1blxyXG4gICAgICogQHBhcmFtIG91dHB1dHRlciBvdXRwdXR0ZXIgdG8gdXNlXHJcbiAgICAgKiBAcGFyYW0gY21kIE5vdCB1c2VkXHJcbiAgICAgKiBAcGFyYW0gY21kQXJncyBOb3QgdXNlZFxyXG4gICAgICogQHBhcmFtIGV4dCBOb3QgdXNlZFxyXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgY29kZSBpcyBkb25lIHJ1bm5pbmdcclxuICAgICAqL1xyXG4gICAgcnVuKGNvZGU6IHN0cmluZywgb3V0cHV0dGVyOiBPdXRwdXR0ZXIsIGNtZDogc3RyaW5nLCBjbWRBcmdzOiBzdHJpbmcsIGV4dDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgb3V0cHV0dGVyLnF1ZXVlQmxvY2soKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGRKb2JUb1F1ZXVlKChyZXNvbHZlLCBfcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2Nlc3MgPT09IG51bGwpIHJldHVybiByZXNvbHZlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaW5pc2hTaWdpbCA9IGBTSUdJTF9CTE9DS19ET05FXyR7TWF0aC5yYW5kb20oKX1fJHtEYXRlLm5vdygpfV8ke2NvZGUubGVuZ3RofWA7XHJcblxyXG4gICAgICAgICAgICBvdXRwdXR0ZXIuc3RhcnRCbG9jaygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgd3JhcHBlZENvZGUgPSB0aGlzLndyYXBDb2RlKGNvZGUsIGZpbmlzaFNpZ2lsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzcy5zdGRpbi53cml0ZSh3cmFwcGVkQ29kZSk7XHJcblxyXG4gICAgICAgICAgICBvdXRwdXR0ZXIuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgICAgIG91dHB1dHRlci5vbihcImRhdGFcIiwgKGRhdGE6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzLnN0ZGluLndyaXRlKGRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHdyaXRlVG9TdGRvdXQgPSAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RyID0gZGF0YS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdHIuZW5kc1dpdGgoZmluaXNoU2lnaWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gZmluaXNoU2lnaWwubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzLnN0ZG91dC5yZW1vdmVMaXN0ZW5lcihcImRhdGFcIiwgd3JpdGVUb1N0ZG91dClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3Muc3RkZXJyLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLCB3cml0ZVRvU3RkZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLCByZXNvbHZlKTtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXR0ZXIud3JpdGUoc3RyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXR0ZXIud3JpdGUoc3RyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHdyaXRlVG9TdGRlcnIgPSAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXR0ZXIud3JpdGVFcnIoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVQcm9tcHRzKGRhdGEudG9TdHJpbmcoKSwgXCJzdGRlcnJcIilcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzcy5vbihcImNsb3NlXCIsIHJlc29sdmUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzLnN0ZG91dC5vbihcImRhdGFcIiwgd3JpdGVUb1N0ZG91dCk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzcy5zdGRlcnIub24oXCJkYXRhXCIsIHdyaXRlVG9TdGRlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdG9wKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3Mub24oXCJjbG9zZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAga2lsbFdpdGhDaGlsZHJlbih0aGlzLnByb2Nlc3MucGlkKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzID0gbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iXX0=