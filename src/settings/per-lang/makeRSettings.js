import { Setting } from "obsidian";
export default (tab, containerEl) => {
    containerEl.createEl('h3', { text: 'R Settings' });
    new Setting(containerEl)
        .setName('Embed R Plots created via `plot()` into Notes')
        .addToggle(toggle => toggle
        .setValue(tab.plugin.settings.REmbedPlots)
        .onChange(async (value) => {
        tab.plugin.settings.REmbedPlots = value;
        console.log(value ? 'Embedding R Plots into Notes.' : "Not embedding R Plots into Notes.");
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Rscript path')
        .setDesc('The path to your Rscript installation. Ensure you provide the Rscript binary instead of the ordinary R binary.')
        .addText(text => text
        .setValue(tab.plugin.settings.RPath)
        .onChange(async (value) => {
        const sanitized = tab.sanitizePath(value);
        tab.plugin.settings.RPath = sanitized;
        console.log('R path set to: ' + sanitized);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('R arguments')
        .addText(text => text
        .setValue(tab.plugin.settings.RArgs)
        .onChange(async (value) => {
        tab.plugin.settings.RArgs = value;
        console.log('R args set to: ' + value);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName("Run R blocks in Notebook Mode")
        .addToggle((toggle) => toggle
        .setValue(tab.plugin.settings.rInteractive)
        .onChange(async (value) => {
        tab.plugin.settings.rInteractive = value;
        await tab.plugin.saveSettings();
    }));
    tab.makeInjectSetting(containerEl, "r");
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFrZVJTZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1ha2VSU2V0dGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUduQyxlQUFlLENBQUMsR0FBZ0IsRUFBRSxXQUF3QixFQUFFLEVBQUU7SUFDMUQsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNuRCxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDbkIsT0FBTyxDQUFDLCtDQUErQyxDQUFDO1NBQ3hELFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU07U0FDdEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztTQUN6QyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLCtCQUErQixDQUFDLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBQzNGLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxjQUFjLENBQUM7U0FDdkIsT0FBTyxDQUFDLGdIQUFnSCxDQUFDO1NBQ3pILE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUk7U0FDaEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztTQUNuQyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxhQUFhLENBQUM7U0FDdEIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSTtTQUNoQixRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1NBQ25DLFFBQVEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDdEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztTQUN4QyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU07U0FDeEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztTQUMxQyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDekMsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDWixHQUFHLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzVDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgU2V0dGluZ3NUYWIgfSBmcm9tIFwiLi4vU2V0dGluZ3NUYWJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0ICh0YWI6IFNldHRpbmdzVGFiLCBjb250YWluZXJFbDogSFRNTEVsZW1lbnQpID0+IHtcclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1IgU2V0dGluZ3MnIH0pO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoJ0VtYmVkIFIgUGxvdHMgY3JlYXRlZCB2aWEgYHBsb3QoKWAgaW50byBOb3RlcycpXHJcbiAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0YWIucGx1Z2luLnNldHRpbmdzLlJFbWJlZFBsb3RzKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0YWIucGx1Z2luLnNldHRpbmdzLlJFbWJlZFBsb3RzID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSA/ICdFbWJlZGRpbmcgUiBQbG90cyBpbnRvIE5vdGVzLicgOiBcIk5vdCBlbWJlZGRpbmcgUiBQbG90cyBpbnRvIE5vdGVzLlwiKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKCdSc2NyaXB0IHBhdGgnKVxyXG4gICAgICAgIC5zZXREZXNjKCdUaGUgcGF0aCB0byB5b3VyIFJzY3JpcHQgaW5zdGFsbGF0aW9uLiBFbnN1cmUgeW91IHByb3ZpZGUgdGhlIFJzY3JpcHQgYmluYXJ5IGluc3RlYWQgb2YgdGhlIG9yZGluYXJ5IFIgYmluYXJ5LicpXHJcbiAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0YWIucGx1Z2luLnNldHRpbmdzLlJQYXRoKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzYW5pdGl6ZWQgPSB0YWIuc2FuaXRpemVQYXRoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHRhYi5wbHVnaW4uc2V0dGluZ3MuUlBhdGggPSBzYW5pdGl6ZWQ7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUiBwYXRoIHNldCB0bzogJyArIHNhbml0aXplZCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0YWIucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZSgnUiBhcmd1bWVudHMnKVxyXG4gICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAuc2V0VmFsdWUodGFiLnBsdWdpbi5zZXR0aW5ncy5SQXJncylcclxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGFiLnBsdWdpbi5zZXR0aW5ncy5SQXJncyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1IgYXJncyBzZXQgdG86ICcgKyB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0YWIucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZShcIlJ1biBSIGJsb2NrcyBpbiBOb3RlYm9vayBNb2RlXCIpXHJcbiAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB0b2dnbGVcclxuICAgICAgICAgICAgLnNldFZhbHVlKHRhYi5wbHVnaW4uc2V0dGluZ3MuckludGVyYWN0aXZlKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0YWIucGx1Z2luLnNldHRpbmdzLnJJbnRlcmFjdGl2ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGFiLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgdGFiLm1ha2VJbmplY3RTZXR0aW5nKGNvbnRhaW5lckVsLCBcInJcIik7XHJcbn0iXX0=