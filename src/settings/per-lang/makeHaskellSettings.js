import { Setting } from "obsidian";
export default (tab, containerEl) => {
    containerEl.createEl('h3', { text: 'Haskell Settings' });
    new Setting(containerEl)
        .setName('Use Ghci')
        .setDesc('Run haskell code with ghci instead of runghc')
        .addToggle(toggle => toggle
        .setValue(tab.plugin.settings.useGhci)
        .onChange(async (value) => {
        tab.plugin.settings.useGhci = value;
        console.log(value ? 'Now using ghci for haskell' : "Now using runghc for haskell.");
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Ghci path')
        .setDesc('The path to your ghci installation.')
        .addText(text => text
        .setValue(tab.plugin.settings.ghciPath)
        .onChange(async (value) => {
        const sanitized = tab.sanitizePath(value);
        tab.plugin.settings.ghciPath = sanitized;
        console.log('ghci path set to: ' + sanitized);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Rungch path')
        .setDesc('The path to your runghc installation.')
        .addText(text => text
        .setValue(tab.plugin.settings.runghcPath)
        .onChange(async (value) => {
        const sanitized = tab.sanitizePath(value);
        tab.plugin.settings.runghcPath = sanitized;
        console.log('runghc path set to: ' + sanitized);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Ghc path')
        .setDesc('The Ghc path your runghc installation will call.')
        .addText(text => text
        .setValue(tab.plugin.settings.ghcPath)
        .onChange(async (value) => {
        const sanitized = tab.sanitizePath(value);
        tab.plugin.settings.ghcPath = sanitized;
        console.log('ghc path set to: ' + sanitized);
        await tab.plugin.saveSettings();
    }));
    tab.makeInjectSetting(containerEl, "haskell");
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFrZUhhc2tlbGxTZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1ha2VIYXNrZWxsU2V0dGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUdqQyxlQUFlLENBQUMsR0FBZ0IsRUFBRSxXQUF3QixFQUFFLEVBQUU7SUFDN0QsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUMsQ0FBQyxDQUFDO0lBQ3ZELElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUN0QixPQUFPLENBQUMsVUFBVSxDQUFDO1NBQ25CLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztTQUN2RCxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNO1NBQ3pCLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7U0FDckMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN6QixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNwRixNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUN0QixPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ3BCLE9BQU8sQ0FBQyxxQ0FBcUMsQ0FBQztTQUM5QyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ25CLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7U0FDdEMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN6QixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUM5QyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUN0QixPQUFPLENBQUMsYUFBYSxDQUFDO1NBQ3RCLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztTQUNoRCxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ25CLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7U0FDeEMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN6QixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUNoRCxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUN0QixPQUFPLENBQUMsVUFBVSxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxrREFBa0QsQ0FBQztTQUMzRCxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ25CLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7U0FDckMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN6QixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUM3QyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0MsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTZXR0aW5nfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHtTZXR0aW5nc1RhYn0gZnJvbSBcIi4uL1NldHRpbmdzVGFiXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAodGFiOiBTZXR0aW5nc1RhYiwgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSA9PiB7XHJcblx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywge3RleHQ6ICdIYXNrZWxsIFNldHRpbmdzJ30pO1xyXG5cdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUoJ1VzZSBHaGNpJylcclxuXHRcdC5zZXREZXNjKCdSdW4gaGFza2VsbCBjb2RlIHdpdGggZ2hjaSBpbnN0ZWFkIG9mIHJ1bmdoYycpXHJcblx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuXHRcdFx0LnNldFZhbHVlKHRhYi5wbHVnaW4uc2V0dGluZ3MudXNlR2hjaSlcclxuXHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdHRhYi5wbHVnaW4uc2V0dGluZ3MudXNlR2hjaSA9IHZhbHVlO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHZhbHVlID8gJ05vdyB1c2luZyBnaGNpIGZvciBoYXNrZWxsJyA6IFwiTm93IHVzaW5nIHJ1bmdoYyBmb3IgaGFza2VsbC5cIik7XHJcblx0XHRcdFx0YXdhaXQgdGFiLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fSkpO1xyXG5cdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUoJ0doY2kgcGF0aCcpXHJcblx0XHQuc2V0RGVzYygnVGhlIHBhdGggdG8geW91ciBnaGNpIGluc3RhbGxhdGlvbi4nKVxyXG5cdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdC5zZXRWYWx1ZSh0YWIucGx1Z2luLnNldHRpbmdzLmdoY2lQYXRoKVxyXG5cdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0Y29uc3Qgc2FuaXRpemVkID0gdGFiLnNhbml0aXplUGF0aCh2YWx1ZSk7XHJcblx0XHRcdFx0dGFiLnBsdWdpbi5zZXR0aW5ncy5naGNpUGF0aCA9IHNhbml0aXplZDtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygnZ2hjaSBwYXRoIHNldCB0bzogJyArIHNhbml0aXplZCk7XHJcblx0XHRcdFx0YXdhaXQgdGFiLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fSkpO1xyXG5cdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUoJ1J1bmdjaCBwYXRoJylcclxuXHRcdC5zZXREZXNjKCdUaGUgcGF0aCB0byB5b3VyIHJ1bmdoYyBpbnN0YWxsYXRpb24uJylcclxuXHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHQuc2V0VmFsdWUodGFiLnBsdWdpbi5zZXR0aW5ncy5ydW5naGNQYXRoKVxyXG5cdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0Y29uc3Qgc2FuaXRpemVkID0gdGFiLnNhbml0aXplUGF0aCh2YWx1ZSk7XHJcblx0XHRcdFx0dGFiLnBsdWdpbi5zZXR0aW5ncy5ydW5naGNQYXRoID0gc2FuaXRpemVkO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdydW5naGMgcGF0aCBzZXQgdG86ICcgKyBzYW5pdGl6ZWQpO1xyXG5cdFx0XHRcdGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdH0pKTtcclxuXHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdC5zZXROYW1lKCdHaGMgcGF0aCcpXHJcblx0XHQuc2V0RGVzYygnVGhlIEdoYyBwYXRoIHlvdXIgcnVuZ2hjIGluc3RhbGxhdGlvbiB3aWxsIGNhbGwuJylcclxuXHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHQuc2V0VmFsdWUodGFiLnBsdWdpbi5zZXR0aW5ncy5naGNQYXRoKVxyXG5cdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0Y29uc3Qgc2FuaXRpemVkID0gdGFiLnNhbml0aXplUGF0aCh2YWx1ZSk7XHJcblx0XHRcdFx0dGFiLnBsdWdpbi5zZXR0aW5ncy5naGNQYXRoID0gc2FuaXRpemVkO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdnaGMgcGF0aCBzZXQgdG86ICcgKyBzYW5pdGl6ZWQpO1xyXG5cdFx0XHRcdGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdH0pKTtcclxuXHR0YWIubWFrZUluamVjdFNldHRpbmcoY29udGFpbmVyRWwsIFwiaGFza2VsbFwiKTtcclxufVxyXG4iXX0=