import { Setting } from "obsidian";
export default (tab, containerEl) => {
    containerEl.createEl('h3', { text: 'Powershell Settings' });
    new Setting(containerEl)
        .setName('Powershell path')
        .setDesc('The path to Powershell.')
        .addText(text => text
        .setValue(tab.plugin.settings.powershellPath)
        .onChange(async (value) => {
        const sanitized = tab.sanitizePath(value);
        tab.plugin.settings.powershellPath = sanitized;
        console.log('Powershell path set to: ' + sanitized);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Powershell arguments')
        .addText(text => text
        .setValue(tab.plugin.settings.powershellArgs)
        .onChange(async (value) => {
        tab.plugin.settings.powershellArgs = value;
        console.log('Powershell args set to: ' + value);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Powershell file extension')
        .setDesc('Changes the file extension for generated shell scripts. This is useful if you don\'t want to use PowerShell.')
        .addText(text => text
        .setValue(tab.plugin.settings.powershellFileExtension)
        .onChange(async (value) => {
        tab.plugin.settings.powershellFileExtension = value;
        console.log('Powershell file extension set to: ' + value);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('PowerShell script encoding')
        .setDesc('Windows still uses windows-1252 as default encoding on most systems for legacy reasons. If you change your encodings systemwide' +
        ' to UTF-8, you can change this setting to UTF-8 as well. Only use one of the following encodings: ' +
        '"ascii", "utf8", "utf-8", "utf16le", "ucs2", "ucs-2", "base64", "latin1", "binary", "hex" (default: "latin1")')
        .addText(text => text
        .setValue(tab.plugin.settings.powershellEncoding)
        .onChange(async (value) => {
        value = value.replace(/["'`Â´]/, "").trim().toLowerCase();
        if (["ascii", "utf8", "utf-8", "utf16le", "ucs2", "ucs-2", "base64", "latin1", "binary", "hex"].includes(value)) {
            tab.plugin.settings.powershellEncoding = value;
            console.log('Powershell file extension set to: ' + value);
            await tab.plugin.saveSettings();
        }
        else {
            console.error("Invalid encoding. " + value + "Please use one of the following encodings: " +
                '"ascii", "utf8", "utf-8", "utf16le", "ucs2", "ucs-2", "base64", "latin1", "binary", "hex"');
        }
    }));
    tab.makeInjectSetting(containerEl, "powershell");
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFrZVBvd2Vyc2hlbGxTZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1ha2VQb3dlcnNoZWxsU2V0dGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFTLE9BQU8sRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUd6QyxlQUFlLENBQUMsR0FBZ0IsRUFBRSxXQUF3QixFQUFFLEVBQUU7SUFDMUQsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO0lBQzVELElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUNuQixPQUFPLENBQUMsaUJBQWlCLENBQUM7U0FDMUIsT0FBTyxDQUFDLHlCQUF5QixDQUFDO1NBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUk7U0FDaEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztTQUM1QyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztRQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztTQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUM7U0FDNUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDaEQsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDWixJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDbkIsT0FBTyxDQUFDLDJCQUEyQixDQUFDO1NBQ3BDLE9BQU8sQ0FBQyw4R0FBOEcsQ0FBQztTQUN2SCxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztTQUNyRCxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQztRQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQzFELE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2YsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ2hCLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQztTQUNyQyxPQUFPLENBQUMsaUlBQWlJO1FBQy9JLG9HQUFvRztRQUNwRywrR0FBK0csQ0FBQztTQUMxRyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztTQUNoRCxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2xDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN6RCxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2hILEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGtCQUFrQixHQUFHLEtBQXVCLENBQUM7WUFDakUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxRCxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDaEM7YUFBTTtZQUNOLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxHQUFHLDZDQUE2QztnQkFDekYsMkZBQTJGLENBQUMsQ0FBQztTQUM5RjtJQUNPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDWixHQUFHLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ3JELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Tm90aWNlLCBTZXR0aW5nfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgU2V0dGluZ3NUYWIgfSBmcm9tIFwiLi4vU2V0dGluZ3NUYWJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0ICh0YWI6IFNldHRpbmdzVGFiLCBjb250YWluZXJFbDogSFRNTEVsZW1lbnQpID0+IHtcclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1Bvd2Vyc2hlbGwgU2V0dGluZ3MnIH0pO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoJ1Bvd2Vyc2hlbGwgcGF0aCcpXHJcbiAgICAgICAgLnNldERlc2MoJ1RoZSBwYXRoIHRvIFBvd2Vyc2hlbGwuJylcclxuICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgLnNldFZhbHVlKHRhYi5wbHVnaW4uc2V0dGluZ3MucG93ZXJzaGVsbFBhdGgpXHJcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNhbml0aXplZCA9IHRhYi5zYW5pdGl6ZVBhdGgodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdGFiLnBsdWdpbi5zZXR0aW5ncy5wb3dlcnNoZWxsUGF0aCA9IHNhbml0aXplZDtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3dlcnNoZWxsIHBhdGggc2V0IHRvOiAnICsgc2FuaXRpemVkKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKCdQb3dlcnNoZWxsIGFyZ3VtZW50cycpXHJcbiAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0YWIucGx1Z2luLnNldHRpbmdzLnBvd2Vyc2hlbGxBcmdzKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0YWIucGx1Z2luLnNldHRpbmdzLnBvd2Vyc2hlbGxBcmdzID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG93ZXJzaGVsbCBhcmdzIHNldCB0bzogJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKCdQb3dlcnNoZWxsIGZpbGUgZXh0ZW5zaW9uJylcclxuICAgICAgICAuc2V0RGVzYygnQ2hhbmdlcyB0aGUgZmlsZSBleHRlbnNpb24gZm9yIGdlbmVyYXRlZCBzaGVsbCBzY3JpcHRzLiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3UgZG9uXFwndCB3YW50IHRvIHVzZSBQb3dlclNoZWxsLicpXHJcbiAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0YWIucGx1Z2luLnNldHRpbmdzLnBvd2Vyc2hlbGxGaWxlRXh0ZW5zaW9uKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0YWIucGx1Z2luLnNldHRpbmdzLnBvd2Vyc2hlbGxGaWxlRXh0ZW5zaW9uID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG93ZXJzaGVsbCBmaWxlIGV4dGVuc2lvbiBzZXQgdG86ICcgKyB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0YWIucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB9KSk7XHJcblx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoJ1Bvd2VyU2hlbGwgc2NyaXB0IGVuY29kaW5nJylcclxuICAgICAgICAuc2V0RGVzYygnV2luZG93cyBzdGlsbCB1c2VzIHdpbmRvd3MtMTI1MiBhcyBkZWZhdWx0IGVuY29kaW5nIG9uIG1vc3Qgc3lzdGVtcyBmb3IgbGVnYWN5IHJlYXNvbnMuIElmIHlvdSBjaGFuZ2UgeW91ciBlbmNvZGluZ3Mgc3lzdGVtd2lkZScgK1xyXG5cdFx0XHQnIHRvIFVURi04LCB5b3UgY2FuIGNoYW5nZSB0aGlzIHNldHRpbmcgdG8gVVRGLTggYXMgd2VsbC4gT25seSB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgZW5jb2RpbmdzOiAnICtcclxuXHRcdFx0J1wiYXNjaWlcIiwgXCJ1dGY4XCIsIFwidXRmLThcIiwgXCJ1dGYxNmxlXCIsIFwidWNzMlwiLCBcInVjcy0yXCIsIFwiYmFzZTY0XCIsIFwibGF0aW4xXCIsIFwiYmluYXJ5XCIsIFwiaGV4XCIgKGRlZmF1bHQ6IFwibGF0aW4xXCIpJylcclxuICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgLnNldFZhbHVlKHRhYi5wbHVnaW4uc2V0dGluZ3MucG93ZXJzaGVsbEVuY29kaW5nKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXCInYMK0XS8sIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdGlmIChbXCJhc2NpaVwiLCBcInV0ZjhcIiwgXCJ1dGYtOFwiLCBcInV0ZjE2bGVcIiwgXCJ1Y3MyXCIsIFwidWNzLTJcIiwgXCJiYXNlNjRcIiwgXCJsYXRpbjFcIiwgXCJiaW5hcnlcIiwgXCJoZXhcIl0uaW5jbHVkZXModmFsdWUpKSB7XHJcblx0XHRcdFx0XHR0YWIucGx1Z2luLnNldHRpbmdzLnBvd2Vyc2hlbGxFbmNvZGluZyA9IHZhbHVlIGFzIEJ1ZmZlckVuY29kaW5nO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ1Bvd2Vyc2hlbGwgZmlsZSBleHRlbnNpb24gc2V0IHRvOiAnICsgdmFsdWUpO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGFiLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkludmFsaWQgZW5jb2RpbmcuIFwiICsgdmFsdWUgKyBcIlBsZWFzZSB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgZW5jb2RpbmdzOiBcIiArXHJcblx0XHRcdFx0XHRcdCdcImFzY2lpXCIsIFwidXRmOFwiLCBcInV0Zi04XCIsIFwidXRmMTZsZVwiLCBcInVjczJcIiwgXCJ1Y3MtMlwiLCBcImJhc2U2NFwiLCBcImxhdGluMVwiLCBcImJpbmFyeVwiLCBcImhleFwiJyk7XHJcblx0XHRcdFx0fVxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICB0YWIubWFrZUluamVjdFNldHRpbmcoY29udGFpbmVyRWwsIFwicG93ZXJzaGVsbFwiKTtcclxufVxyXG4iXX0=