import { Setting } from "obsidian";
export default (tab, containerEl) => {
    containerEl.createEl('h3', { text: 'Shell Settings' });
    new Setting(containerEl)
        .setName('Shell path')
        .setDesc('The path to shell. Default is Bash but you can use any shell you want, e.g. bash, zsh, fish, ...')
        .addText(text => text
        .setValue(tab.plugin.settings.shellPath)
        .onChange(async (value) => {
        const sanitized = tab.sanitizePath(value);
        tab.plugin.settings.shellPath = sanitized;
        console.log('Shell path set to: ' + sanitized);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Shell arguments')
        .addText(text => text
        .setValue(tab.plugin.settings.shellArgs)
        .onChange(async (value) => {
        tab.plugin.settings.shellArgs = value;
        console.log('Shell args set to: ' + value);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Shell file extension')
        .setDesc('Changes the file extension for generated shell scripts. This is useful if you want to use a shell other than bash.')
        .addText(text => text
        .setValue(tab.plugin.settings.shellFileExtension)
        .onChange(async (value) => {
        tab.plugin.settings.shellFileExtension = value;
        console.log('Shell file extension set to: ' + value);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Shell WSL mode')
        .setDesc('Run the shell script in Windows Subsystem for Linux. This option is used if the global "WSL Mode" is disabled.')
        .addToggle((toggle) => toggle
        .setValue(tab.plugin.settings.shellWSLMode)
        .onChange(async (value) => {
        tab.plugin.settings.shellWSLMode = value;
        await tab.plugin.saveSettings();
    }));
    tab.makeInjectSetting(containerEl, "shell");
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFrZVNoZWxsU2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYWtlU2hlbGxTZXR0aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR25DLGVBQWUsQ0FBQyxHQUFnQixFQUFFLFdBQXdCLEVBQUUsRUFBRTtJQUMxRCxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDdkQsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxZQUFZLENBQUM7U0FDckIsT0FBTyxDQUFDLGtHQUFrRyxDQUFDO1NBQzNHLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUk7U0FDaEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztTQUN2QyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztTQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7U0FDdkMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDM0MsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDWixJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDbkIsT0FBTyxDQUFDLHNCQUFzQixDQUFDO1NBQy9CLE9BQU8sQ0FBQyxvSEFBb0gsQ0FBQztTQUM3SCxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztTQUNoRCxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3JELE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRVosSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztTQUN6QixPQUFPLENBQUMsZ0hBQWdILENBQUM7U0FDekgsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDbEIsTUFBTTtTQUNELFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUM7U0FDMUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ3pDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FDVCxDQUFDO0lBQ04sR0FBRyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IFNldHRpbmdzVGFiIH0gZnJvbSBcIi4uL1NldHRpbmdzVGFiXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAodGFiOiBTZXR0aW5nc1RhYiwgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdTaGVsbCBTZXR0aW5ncycgfSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZSgnU2hlbGwgcGF0aCcpXHJcbiAgICAgICAgLnNldERlc2MoJ1RoZSBwYXRoIHRvIHNoZWxsLiBEZWZhdWx0IGlzIEJhc2ggYnV0IHlvdSBjYW4gdXNlIGFueSBzaGVsbCB5b3Ugd2FudCwgZS5nLiBiYXNoLCB6c2gsIGZpc2gsIC4uLicpXHJcbiAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0YWIucGx1Z2luLnNldHRpbmdzLnNoZWxsUGF0aClcclxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2FuaXRpemVkID0gdGFiLnNhbml0aXplUGF0aCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB0YWIucGx1Z2luLnNldHRpbmdzLnNoZWxsUGF0aCA9IHNhbml0aXplZDtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTaGVsbCBwYXRoIHNldCB0bzogJyArIHNhbml0aXplZCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0YWIucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZSgnU2hlbGwgYXJndW1lbnRzJylcclxuICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgLnNldFZhbHVlKHRhYi5wbHVnaW4uc2V0dGluZ3Muc2hlbGxBcmdzKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0YWIucGx1Z2luLnNldHRpbmdzLnNoZWxsQXJncyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NoZWxsIGFyZ3Mgc2V0IHRvOiAnICsgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGFiLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoJ1NoZWxsIGZpbGUgZXh0ZW5zaW9uJylcclxuICAgICAgICAuc2V0RGVzYygnQ2hhbmdlcyB0aGUgZmlsZSBleHRlbnNpb24gZm9yIGdlbmVyYXRlZCBzaGVsbCBzY3JpcHRzLiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3Ugd2FudCB0byB1c2UgYSBzaGVsbCBvdGhlciB0aGFuIGJhc2guJylcclxuICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgLnNldFZhbHVlKHRhYi5wbHVnaW4uc2V0dGluZ3Muc2hlbGxGaWxlRXh0ZW5zaW9uKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0YWIucGx1Z2luLnNldHRpbmdzLnNoZWxsRmlsZUV4dGVuc2lvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NoZWxsIGZpbGUgZXh0ZW5zaW9uIHNldCB0bzogJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZSgnU2hlbGwgV1NMIG1vZGUnKVxyXG4gICAgICAgIC5zZXREZXNjKCdSdW4gdGhlIHNoZWxsIHNjcmlwdCBpbiBXaW5kb3dzIFN1YnN5c3RlbSBmb3IgTGludXguIFRoaXMgb3B0aW9uIGlzIHVzZWQgaWYgdGhlIGdsb2JhbCBcIldTTCBNb2RlXCIgaXMgZGlzYWJsZWQuJylcclxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRhYi5wbHVnaW4uc2V0dGluZ3Muc2hlbGxXU0xNb2RlKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYi5wbHVnaW4uc2V0dGluZ3Muc2hlbGxXU0xNb2RlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGFiLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIHRhYi5tYWtlSW5qZWN0U2V0dGluZyhjb250YWluZXJFbCwgXCJzaGVsbFwiKTtcclxufVxyXG4iXX0=