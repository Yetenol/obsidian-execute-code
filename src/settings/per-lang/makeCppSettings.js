import { Setting } from "obsidian";
export default (tab, containerEl) => {
    containerEl.createEl('h3', { text: 'C++ Settings' });
    new Setting(containerEl)
        .setName('Cling path')
        .setDesc('The path to your Cling installation.')
        .addText(text => text
        .setValue(tab.plugin.settings.clingPath)
        .onChange(async (value) => {
        const sanitized = tab.sanitizePath(value);
        tab.plugin.settings.clingPath = sanitized;
        console.log('Cling path set to: ' + sanitized);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Cling arguments for C++')
        .addText(text => text
        .setValue(tab.plugin.settings.cppArgs)
        .onChange(async (value) => {
        tab.plugin.settings.cppArgs = value;
        console.log('CPP args set to: ' + value);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Cling std')
        .addDropdown(dropdown => dropdown
        .addOption('c++98', 'C++ 98')
        .addOption('c++11', 'C++ 11')
        .addOption('c++14', 'C++ 14')
        .addOption('c++17', 'C++ 17')
        .addOption('c++2a', 'C++ 20')
        .setValue(tab.plugin.settings.clingStd)
        .onChange(async (value) => {
        tab.plugin.settings.clingStd = value;
        console.log('Cling std set to: ' + value);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Use main function')
        .setDesc('If enabled, will use a main() function as the code block entrypoint.')
        .addToggle((toggle) => toggle
        .setValue(tab.plugin.settings.cppUseMain)
        .onChange(async (value) => {
        tab.plugin.settings.cppUseMain = value;
        console.log('Cpp use main set to: ' + value);
        await tab.plugin.saveSettings();
    }));
    tab.makeInjectSetting(containerEl, "cpp");
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFrZUNwcFNldHRpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFrZUNwcFNldHRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHbkMsZUFBZSxDQUFDLEdBQWdCLEVBQUUsV0FBd0IsRUFBRSxFQUFFO0lBQzFELFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDckQsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxZQUFZLENBQUM7U0FDckIsT0FBTyxDQUFDLHNDQUFzQyxDQUFDO1NBQy9DLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUk7U0FDaEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztTQUN2QyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztTQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7U0FDckMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDekMsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDWixJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDbkIsT0FBTyxDQUFDLFdBQVcsQ0FBQztTQUNwQixXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRO1NBQ3JDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1NBQ25CLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1NBQzVCLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1NBQzVCLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1NBQzVCLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1NBQzVCLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7U0FDdEMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDMUMsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDWixJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDbkIsT0FBTyxDQUFDLG1CQUFtQixDQUFDO1NBQzVCLE9BQU8sQ0FBQyxzRUFBc0UsQ0FBQztTQUMvRSxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU07U0FDeEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztTQUN4QyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUM3QyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNaLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBTZXR0aW5nc1RhYiB9IGZyb20gXCIuLi9TZXR0aW5nc1RhYlwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHRhYjogU2V0dGluZ3NUYWIsIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCkgPT4ge1xyXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnQysrIFNldHRpbmdzJyB9KTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKCdDbGluZyBwYXRoJylcclxuICAgICAgICAuc2V0RGVzYygnVGhlIHBhdGggdG8geW91ciBDbGluZyBpbnN0YWxsYXRpb24uJylcclxuICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgLnNldFZhbHVlKHRhYi5wbHVnaW4uc2V0dGluZ3MuY2xpbmdQYXRoKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzYW5pdGl6ZWQgPSB0YWIuc2FuaXRpemVQYXRoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHRhYi5wbHVnaW4uc2V0dGluZ3MuY2xpbmdQYXRoID0gc2FuaXRpemVkO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NsaW5nIHBhdGggc2V0IHRvOiAnICsgc2FuaXRpemVkKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKCdDbGluZyBhcmd1bWVudHMgZm9yIEMrKycpXHJcbiAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0YWIucGx1Z2luLnNldHRpbmdzLmNwcEFyZ3MpXHJcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRhYi5wbHVnaW4uc2V0dGluZ3MuY3BwQXJncyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NQUCBhcmdzIHNldCB0bzogJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKCdDbGluZyBzdGQnKVxyXG4gICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiBkcm9wZG93blxyXG5cdFx0XHQuYWRkT3B0aW9uKCdjKys5OCcsICdDKysgOTgnKVxyXG4gICAgICAgICAgICAuYWRkT3B0aW9uKCdjKysxMScsICdDKysgMTEnKVxyXG4gICAgICAgICAgICAuYWRkT3B0aW9uKCdjKysxNCcsICdDKysgMTQnKVxyXG4gICAgICAgICAgICAuYWRkT3B0aW9uKCdjKysxNycsICdDKysgMTcnKVxyXG4gICAgICAgICAgICAuYWRkT3B0aW9uKCdjKysyYScsICdDKysgMjAnKVxyXG4gICAgICAgICAgICAuc2V0VmFsdWUodGFiLnBsdWdpbi5zZXR0aW5ncy5jbGluZ1N0ZClcclxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGFiLnBsdWdpbi5zZXR0aW5ncy5jbGluZ1N0ZCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NsaW5nIHN0ZCBzZXQgdG86ICcgKyB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0YWIucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZSgnVXNlIG1haW4gZnVuY3Rpb24nKVxyXG4gICAgICAgIC5zZXREZXNjKCdJZiBlbmFibGVkLCB3aWxsIHVzZSBhIG1haW4oKSBmdW5jdGlvbiBhcyB0aGUgY29kZSBibG9jayBlbnRyeXBvaW50LicpXHJcbiAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB0b2dnbGVcclxuICAgICAgICAgICAgLnNldFZhbHVlKHRhYi5wbHVnaW4uc2V0dGluZ3MuY3BwVXNlTWFpbilcclxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGFiLnBsdWdpbi5zZXR0aW5ncy5jcHBVc2VNYWluID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQ3BwIHVzZSBtYWluIHNldCB0bzogJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIHRhYi5tYWtlSW5qZWN0U2V0dGluZyhjb250YWluZXJFbCwgXCJjcHBcIik7XHJcbn1cclxuIl19