import { Setting } from "obsidian";
export default (tab, containerEl) => {
    containerEl.createEl('h3', { text: 'Batch Settings' });
    new Setting(containerEl)
        .setName('Batch path')
        .setDesc('The path to the terminal. Default is command prompt.')
        .addText(text => text
        .setValue(tab.plugin.settings.batchPath)
        .onChange(async (value) => {
        const sanitized = tab.sanitizePath(value);
        tab.plugin.settings.batchPath = sanitized;
        console.log('Batch path set to: ' + sanitized);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Batch arguments')
        .addText(text => text
        .setValue(tab.plugin.settings.batchArgs)
        .onChange(async (value) => {
        tab.plugin.settings.batchArgs = value;
        console.log('Batch args set to: ' + value);
        await tab.plugin.saveSettings();
    }));
    new Setting(containerEl)
        .setName('Batch file extension')
        .setDesc('Changes the file extension for generated batch scripts. Default is .bat')
        .addText(text => text
        .setValue(tab.plugin.settings.batchFileExtension)
        .onChange(async (value) => {
        tab.plugin.settings.batchFileExtension = value;
        console.log('Batch file extension set to: ' + value);
        await tab.plugin.saveSettings();
    }));
    tab.makeInjectSetting(containerEl, "batch");
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFrZUJhdGNoU2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYWtlQmF0Y2hTZXR0aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR25DLGVBQWUsQ0FBQyxHQUFnQixFQUFFLFdBQXdCLEVBQUUsRUFBRTtJQUMxRCxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDdkQsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxZQUFZLENBQUM7U0FDckIsT0FBTyxDQUFDLHNEQUFzRCxDQUFDO1NBQy9ELE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUk7U0FDaEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztTQUN2QyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztTQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7U0FDdkMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDM0MsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDWixJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDbkIsT0FBTyxDQUFDLHNCQUFzQixDQUFDO1NBQy9CLE9BQU8sQ0FBQyx5RUFBeUUsQ0FBQztTQUNsRixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztTQUNoRCxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3JELE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osR0FBRyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IFNldHRpbmdzVGFiIH0gZnJvbSBcIi4uL1NldHRpbmdzVGFiXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAodGFiOiBTZXR0aW5nc1RhYiwgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdCYXRjaCBTZXR0aW5ncycgfSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZSgnQmF0Y2ggcGF0aCcpXHJcbiAgICAgICAgLnNldERlc2MoJ1RoZSBwYXRoIHRvIHRoZSB0ZXJtaW5hbC4gRGVmYXVsdCBpcyBjb21tYW5kIHByb21wdC4nKVxyXG4gICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAuc2V0VmFsdWUodGFiLnBsdWdpbi5zZXR0aW5ncy5iYXRjaFBhdGgpXHJcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNhbml0aXplZCA9IHRhYi5zYW5pdGl6ZVBhdGgodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdGFiLnBsdWdpbi5zZXR0aW5ncy5iYXRjaFBhdGggPSBzYW5pdGl6ZWQ7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQmF0Y2ggcGF0aCBzZXQgdG86ICcgKyBzYW5pdGl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGFiLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoJ0JhdGNoIGFyZ3VtZW50cycpXHJcbiAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZSh0YWIucGx1Z2luLnNldHRpbmdzLmJhdGNoQXJncylcclxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGFiLnBsdWdpbi5zZXR0aW5ncy5iYXRjaEFyZ3MgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdCYXRjaCBhcmdzIHNldCB0bzogJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKCdCYXRjaCBmaWxlIGV4dGVuc2lvbicpXHJcbiAgICAgICAgLnNldERlc2MoJ0NoYW5nZXMgdGhlIGZpbGUgZXh0ZW5zaW9uIGZvciBnZW5lcmF0ZWQgYmF0Y2ggc2NyaXB0cy4gRGVmYXVsdCBpcyAuYmF0JylcclxuICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgLnNldFZhbHVlKHRhYi5wbHVnaW4uc2V0dGluZ3MuYmF0Y2hGaWxlRXh0ZW5zaW9uKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0YWIucGx1Z2luLnNldHRpbmdzLmJhdGNoRmlsZUV4dGVuc2lvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0JhdGNoIGZpbGUgZXh0ZW5zaW9uIHNldCB0bzogJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRhYi5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIHRhYi5tYWtlSW5qZWN0U2V0dGluZyhjb250YWluZXJFbCwgXCJiYXRjaFwiKTtcclxufVxyXG4iXX0=